// <auto-generated />

using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microting.eForm.Infrastructure;

namespace Microting.eForm.Migrations
{
    [DbContext(typeof(MicrotingDbContext))]
    [Migration("20201225165255_FixingBrokenTableNames")]
    partial class FixingBrokenTableNames
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Microting.eForm.Infrastructure.Data.Entities.Answer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AnswerDuration")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("FinishedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<int?>("MicrotingUid")
                        .HasColumnType("int");

                    b.Property<int>("QuestionSetId")
                        .HasColumnType("int");

                    b.Property<int>("SiteId")
                        .HasColumnType("int");

                    b.Property<int?>("SurveyConfigurationId")
                        .HasColumnType("int");

                    b.Property<string>("TimeZone")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("UnitId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("UtcAdjusted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("Version")
                        .HasColumnType("int");

                    b.Property<string>("WorkflowState")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.HasIndex("QuestionSetId");

                    b.HasIndex("SiteId");

                    b.HasIndex("SurveyConfigurationId");

                    b.HasIndex("UnitId");

                    b.ToTable("Answers");
                });

            modelBuilder.Entity("Microting.eForm.Infrastructure.Data.Entities.AnswerValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AnswerId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("MicrotingUid")
                        .HasColumnType("int");

                    b.Property<int>("OptionId")
                        .HasColumnType("int");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("Version")
                        .HasColumnType("int");

                    b.Property<string>("WorkflowState")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("AnswerId");

                    b.HasIndex("OptionId");

                    b.HasIndex("QuestionId");

                    b.ToTable("AnswerValues");
                });

            modelBuilder.Entity("Microting.eForm.Infrastructure.Data.Entities.AnswerValueVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AnswerId")
                        .HasColumnType("int");

                    b.Property<int>("AnswerValueId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("MicrotingUid")
                        .HasColumnType("int");

                    b.Property<int>("OptionId")
                        .HasColumnType("int");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("Version")
                        .HasColumnType("int");

                    b.Property<string>("WorkflowState")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("AnswerValueId");

                    b.ToTable("AnswerValueVersions");
                });

            modelBuilder.Entity("Microting.eForm.Infrastructure.Data.Entities.AnswerVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AnswerDuration")
                        .HasColumnType("int");

                    b.Property<int>("AnswerId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("FinishedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<int?>("MicrotingUid")
                        .HasColumnType("int");

                    b.Property<int>("QuestionSetId")
                        .HasColumnType("int");

                    b.Property<int>("SiteId")
                        .HasColumnType("int");

                    b.Property<int?>("SurveyConfigurationId")
                        .HasColumnType("int");

                    b.Property<string>("TimeZone")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("UnitId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("UtcAdjusted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("Version")
                        .HasColumnType("int");

                    b.Property<string>("WorkflowState")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("AnswerVersions");
                });

            modelBuilder.Entity("Microting.eForm.Infrastructure.Data.Entities.Case", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CaseUid")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<int?>("CheckListId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Custom")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("DoneAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("FieldValue1")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("FieldValue10")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("FieldValue2")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("FieldValue3")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("FieldValue4")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("FieldValue5")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("FieldValue6")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("FieldValue7")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("FieldValue8")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("FieldValue9")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("FolderId")
                        .HasColumnType("int");

                    b.Property<int?>("MicrotingCheckUid")
                        .HasColumnType("int");

                    b.Property<int?>("MicrotingUid")
                        .HasColumnType("int");

                    b.Property<int?>("SiteId")
                        .HasColumnType("int");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<int?>("UnitId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("Version")
                        .HasColumnType("int");

                    b.Property<int?>("WorkerId")
                        .HasColumnType("int");

                    b.Property<string>("WorkflowState")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("CheckListId");

                    b.HasIndex("FolderId");

                    b.HasIndex("SiteId");

                    b.HasIndex("UnitId");

                    b.HasIndex("WorkerId");

                    b.HasIndex("MicrotingUid", "MicrotingCheckUid");

                    b.ToTable("Cases");
                });

            modelBuilder.Entity("Microting.eForm.Infrastructure.Data.Entities.CaseVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CaseId")
                        .HasColumnType("int");

                    b.Property<string>("CaseUid")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<int?>("CheckListId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Custom")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("DoneAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("FieldValue1")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("FieldValue10")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("FieldValue2")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("FieldValue3")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("FieldValue4")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("FieldValue5")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("FieldValue6")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("FieldValue7")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("FieldValue8")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("FieldValue9")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("FolderId")
                        .HasColumnType("int");

                    b.Property<int?>("MicrotingCheckUid")
                        .HasColumnType("int");

                    b.Property<int?>("MicrotingUid")
                        .HasColumnType("int");

                    b.Property<int?>("SiteId")
                        .HasColumnType("int");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<int?>("UnitId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("Version")
                        .HasColumnType("int");

                    b.Property<int?>("WorkerId")
                        .HasColumnType("int");

                    b.Property<string>("WorkflowState")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("CaseVersions");
                });

            modelBuilder.Entity("Microting.eForm.Infrastructure.Data.Entities.CheckList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<short?>("ApprovalEnabled")
                        .HasColumnType("smallint");

                    b.Property<string>("CaseType")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<string>("Color")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Custom")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("DisplayIndex")
                        .HasColumnType("int");

                    b.Property<bool>("DocxExportEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<short?>("DoneButtonEnabled")
                        .HasColumnType("smallint");

                    b.Property<short?>("DownloadEntities")
                        .HasColumnType("smallint");

                    b.Property<bool>("ExcelExportEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<short?>("ExtraFieldsEnabled")
                        .HasColumnType("smallint");

                    b.Property<short?>("FastNavigation")
                        .HasColumnType("smallint");

                    b.Property<int?>("Field1")
                        .HasColumnType("int");

                    b.Property<int?>("Field10")
                        .HasColumnType("int");

                    b.Property<int?>("Field2")
                        .HasColumnType("int");

                    b.Property<int?>("Field3")
                        .HasColumnType("int");

                    b.Property<int?>("Field4")
                        .HasColumnType("int");

                    b.Property<int?>("Field5")
                        .HasColumnType("int");

                    b.Property<int?>("Field6")
                        .HasColumnType("int");

                    b.Property<int?>("Field7")
                        .HasColumnType("int");

                    b.Property<int?>("Field8")
                        .HasColumnType("int");

                    b.Property<int?>("Field9")
                        .HasColumnType("int");

                    b.Property<string>("FolderName")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<bool>("JasperExportEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Label")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<short?>("ManualSync")
                        .HasColumnType("smallint");

                    b.Property<short?>("MultiApproval")
                        .HasColumnType("smallint");

                    b.Property<string>("OriginalId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<short?>("QuickSyncEnabled")
                        .HasColumnType("smallint");

                    b.Property<int?>("Repeated")
                        .HasColumnType("int");

                    b.Property<string>("ReportH1")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ReportH2")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ReportH3")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ReportH4")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ReportH5")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<short?>("ReviewEnabled")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("Version")
                        .HasColumnType("int");

                    b.Property<string>("WorkflowState")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("CheckLists");
                });

            modelBuilder.Entity("Microting.eForm.Infrastructure.Data.Entities.CheckListSite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CheckListId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("FolderId")
                        .HasColumnType("int");

                    b.Property<int>("LastCheckId")
                        .HasColumnType("int");

                    b.Property<int>("MicrotingUid")
                        .HasColumnType("int");

                    b.Property<int?>("SiteId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("Version")
                        .HasColumnType("int");

                    b.Property<string>("WorkflowState")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("CheckListId");

                    b.HasIndex("FolderId");

                    b.HasIndex("SiteId");

                    b.ToTable("CheckListSites");
                });

            modelBuilder.Entity("Microting.eForm.Infrastructure.Data.Entities.CheckListSiteVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CheckListId")
                        .HasColumnType("int");

                    b.Property<int?>("CheckListSiteId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("FolderId")
                        .HasColumnType("int");

                    b.Property<int>("LastCheckId")
                        .HasColumnType("int");

                    b.Property<int>("MicrotingUid")
                        .HasColumnType("int");

                    b.Property<int?>("SiteId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("Version")
                        .HasColumnType("int");

                    b.Property<string>("WorkflowState")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("CheckListSiteVersions");
                });

            modelBuilder.Entity("Microting.eForm.Infrastructure.Data.Entities.CheckListTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CheckListId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("Version")
                        .HasColumnType("int");

                    b.Property<string>("WorkflowState")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("CheckListId");

                    b.ToTable("CheckListTranslations");
                });

            modelBuilder.Entity("Microting.eForm.Infrastructure.Data.Entities.CheckListTranslationVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CheckListId")
                        .HasColumnType("int");

                    b.Property<int>("CheckListTranslationId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("Version")
                        .HasColumnType("int");

                    b.Property<string>("WorkflowState")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("CheckListTranslationVersions");
                });

            modelBuilder.Entity("Microting.eForm.Infrastructure.Data.Entities.CheckListValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CaseId")
                        .HasColumnType("int");

                    b.Property<int?>("CheckListDuplicateId")
                        .HasColumnType("int");

                    b.Property<int?>("CheckListId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Status")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("Version")
                        .HasColumnType("int");

                    b.Property<string>("WorkflowState")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("CheckListValues");
                });

            modelBuilder.Entity("Microting.eForm.Infrastructure.Data.Entities.CheckListValueVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CaseId")
                        .HasColumnType("int");

                    b.Property<int?>("CheckListDuplicateId")
                        .HasColumnType("int");

                    b.Property<int?>("CheckListId")
                        .HasColumnType("int");

                    b.Property<int?>("CheckListValueId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Status")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("Version")
                        .HasColumnType("int");

                    b.Property<string>("WorkflowState")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("CheckListValueVersions");
                });

            modelBuilder.Entity("Microting.eForm.Infrastructure.Data.Entities.CheckListVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<short?>("ApprovalEnabled")
                        .HasColumnType("smallint");

                    b.Property<string>("CaseType")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<int?>("CheckListId")
                        .HasColumnType("int");

                    b.Property<string>("Color")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Custom")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("DisplayIndex")
                        .HasColumnType("int");

                    b.Property<bool>("DocxExportEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<short?>("DoneButtonEnabled")
                        .HasColumnType("smallint");

                    b.Property<short?>("DownloadEntities")
                        .HasColumnType("smallint");

                    b.Property<bool>("ExcelExportEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<short?>("ExtraFieldsEnabled")
                        .HasColumnType("smallint");

                    b.Property<short?>("FastNavigation")
                        .HasColumnType("smallint");

                    b.Property<int?>("Field1")
                        .HasColumnType("int");

                    b.Property<int?>("Field10")
                        .HasColumnType("int");

                    b.Property<int?>("Field2")
                        .HasColumnType("int");

                    b.Property<int?>("Field3")
                        .HasColumnType("int");

                    b.Property<int?>("Field4")
                        .HasColumnType("int");

                    b.Property<int?>("Field5")
                        .HasColumnType("int");

                    b.Property<int?>("Field6")
                        .HasColumnType("int");

                    b.Property<int?>("Field7")
                        .HasColumnType("int");

                    b.Property<int?>("Field8")
                        .HasColumnType("int");

                    b.Property<int?>("Field9")
                        .HasColumnType("int");

                    b.Property<string>("FolderName")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<bool>("JasperExportEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Label")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<short?>("ManualSync")
                        .HasColumnType("smallint");

                    b.Property<short?>("MultiApproval")
                        .HasColumnType("smallint");

                    b.Property<string>("OriginalId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<short?>("QuickSyncEnabled")
                        .HasColumnType("smallint");

                    b.Property<int?>("Repeated")
                        .HasColumnType("int");

                    b.Property<string>("ReportH1")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ReportH2")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ReportH3")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ReportH4")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ReportH5")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<short?>("ReviewEnabled")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("Version")
                        .HasColumnType("int");

                    b.Property<string>("WorkflowState")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("CheckListVersions");
                });

            modelBuilder.Entity("Microting.eForm.Infrastructure.Data.Entities.EntityGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("MicrotingUid")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Type")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("Version")
                        .HasColumnType("int");

                    b.Property<string>("WorkflowState")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("EntityGroups");
                });

            modelBuilder.Entity("Microting.eForm.Infrastructure.Data.Entities.EntityGroupVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("EntityGroupId")
                        .HasColumnType("int");

                    b.Property<string>("MicrotingUid")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Type")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("Version")
                        .HasColumnType("int");

                    b.Property<string>("WorkflowState")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("EntityGroupVersions");
                });

            modelBuilder.Entity("Microting.eForm.Infrastructure.Data.Entities.EntityItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("DisplayIndex")
                        .HasColumnType("int");

                    b.Property<int>("EntityGroupId")
                        .HasColumnType("int");

                    b.Property<string>("EntityItemUid")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<string>("MicrotingUid")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<short?>("Synced")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("Version")
                        .HasColumnType("int");

                    b.Property<string>("WorkflowState")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("EntityItems");
                });

            modelBuilder.Entity("Microting.eForm.Infrastructure.Data.Entities.EntityItemVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("DisplayIndex")
                        .HasColumnType("int");

                    b.Property<int?>("EntityGroupId")
                        .HasColumnType("int");

                    b.Property<int>("EntityItemId")
                        .HasColumnType("int");

                    b.Property<string>("EntityItemUid")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<string>("MicrotingUid")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<short?>("Synced")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("Version")
                        .HasColumnType("int");

                    b.Property<string>("WorkflowState")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("EntityItemVersions");
                });

            modelBuilder.Entity("Microting.eForm.Infrastructure.Data.Entities.Field", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<short?>("BarcodeEnabled")
                        .HasColumnType("smallint");

                    b.Property<string>("BarcodeType")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<int?>("CheckListId")
                        .HasColumnType("int");

                    b.Property<string>("Color")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Custom")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("DecimalCount")
                        .HasColumnType("int");

                    b.Property<string>("DefaultValue")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("DisplayIndex")
                        .HasColumnType("int");

                    b.Property<short?>("Dummy")
                        .HasColumnType("smallint");

                    b.Property<int?>("EntityGroupId")
                        .HasColumnType("int");

                    b.Property<int?>("FieldTypeId")
                        .HasColumnType("int");

                    b.Property<short?>("GeolocationEnabled")
                        .HasColumnType("smallint");

                    b.Property<short?>("GeolocationForced")
                        .HasColumnType("smallint");

                    b.Property<short?>("GeolocationHidden")
                        .HasColumnType("smallint");

                    b.Property<short?>("IsNum")
                        .HasColumnType("smallint");

                    b.Property<string>("KeyValuePairList")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Label")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<short?>("Mandatory")
                        .HasColumnType("smallint");

                    b.Property<int?>("MaxLength")
                        .HasColumnType("int");

                    b.Property<string>("MaxValue")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<string>("MinValue")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<int?>("Multi")
                        .HasColumnType("int");

                    b.Property<short?>("Optional")
                        .HasColumnType("smallint");

                    b.Property<string>("OriginalId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("ParentFieldId")
                        .HasColumnType("int");

                    b.Property<string>("QueryType")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<short?>("ReadOnly")
                        .HasColumnType("smallint");

                    b.Property<short?>("Selected")
                        .HasColumnType("smallint");

                    b.Property<short?>("Split")
                        .HasColumnType("smallint");

                    b.Property<short?>("StopOnSave")
                        .HasColumnType("smallint");

                    b.Property<string>("UnitName")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("Version")
                        .HasColumnType("int");

                    b.Property<string>("WorkflowState")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("CheckListId");

                    b.HasIndex("FieldTypeId");

                    b.HasIndex("ParentFieldId");

                    b.ToTable("Fields");
                });

            modelBuilder.Entity("Microting.eForm.Infrastructure.Data.Entities.FieldOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DisplayOrder")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("FieldId")
                        .HasColumnType("int");

                    b.Property<string>("Key")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("Selected")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("Version")
                        .HasColumnType("int");

                    b.Property<string>("WorkflowState")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.ToTable("FieldOptions");
                });

            modelBuilder.Entity("Microting.eForm.Infrastructure.Data.Entities.FieldOptionTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("FieldOptionId")
                        .HasColumnType("int");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("Version")
                        .HasColumnType("int");

                    b.Property<string>("WorkflowState")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("FieldOptionId");

                    b.ToTable("FieldOptionTranslations");
                });

            modelBuilder.Entity("Microting.eForm.Infrastructure.Data.Entities.FieldOptionTranslationVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("FieldOptionId")
                        .HasColumnType("int");

                    b.Property<int>("FieldOptionTranslationId")
                        .HasColumnType("int");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("Version")
                        .HasColumnType("int");

                    b.Property<string>("WorkflowState")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("FieldOptionTranslationVersions");
                });

            modelBuilder.Entity("Microting.eForm.Infrastructure.Data.Entities.FieldOptionVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DisplayOrder")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("FieldId")
                        .HasColumnType("int");

                    b.Property<int>("FieldOptionId")
                        .HasColumnType("int");

                    b.Property<string>("Key")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("Selected")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("Version")
                        .HasColumnType("int");

                    b.Property<string>("WorkflowState")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("FieldOptionVersions");
                });

            modelBuilder.Entity("Microting.eForm.Infrastructure.Data.Entities.FieldTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("FieldId")
                        .HasColumnType("int");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("Version")
                        .HasColumnType("int");

                    b.Property<string>("WorkflowState")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.ToTable("FieldTranslations");
                });

            modelBuilder.Entity("Microting.eForm.Infrastructure.Data.Entities.FieldTranslationVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("FieldId")
                        .HasColumnType("int");

                    b.Property<int>("FieldTranslationId")
                        .HasColumnType("int");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("Version")
                        .HasColumnType("int");

                    b.Property<string>("WorkflowState")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("FieldTranslationVersions");
                });

            modelBuilder.Entity("Microting.eForm.Infrastructure.Data.Entities.FieldType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<string>("Type")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("FieldTypes");
                });

            modelBuilder.Entity("Microting.eForm.Infrastructure.Data.Entities.FieldValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Accuracy")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<string>("Altitude")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<int?>("CaseId")
                        .HasColumnType("int");

                    b.Property<int?>("CheckListDuplicateId")
                        .HasColumnType("int");

                    b.Property<int?>("CheckListId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DoneAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("FieldId")
                        .HasColumnType("int");

                    b.Property<string>("Heading")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<string>("Latitude")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<string>("Longitude")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("UploadedDataId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("Version")
                        .HasColumnType("int");

                    b.Property<int?>("WorkerId")
                        .HasColumnType("int");

                    b.Property<string>("WorkflowState")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("CheckListId");

                    b.HasIndex("FieldId");

                    b.HasIndex("UploadedDataId");

                    b.HasIndex("WorkerId");

                    b.ToTable("FieldValues");
                });

            modelBuilder.Entity("Microting.eForm.Infrastructure.Data.Entities.FieldValueVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Accuracy")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<string>("Altitude")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<int?>("CaseId")
                        .HasColumnType("int");

                    b.Property<int?>("CheckListDuplicateId")
                        .HasColumnType("int");

                    b.Property<int?>("CheckListId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DoneAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("FieldId")
                        .HasColumnType("int");

                    b.Property<int?>("FieldValueId")
                        .HasColumnType("int");

                    b.Property<string>("Heading")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<string>("Latitude")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<string>("Longitude")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("UploadedDataId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("Version")
                        .HasColumnType("int");

                    b.Property<int?>("WorkerId")
                        .HasColumnType("int");

                    b.Property<string>("WorkflowState")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("FieldValueVersions");
                });

            modelBuilder.Entity("Microting.eForm.Infrastructure.Data.Entities.FieldVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<short?>("BarcodeEnabled")
                        .HasColumnType("smallint");

                    b.Property<string>("BarcodeType")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<int?>("CheckListId")
                        .HasColumnType("int");

                    b.Property<string>("Color")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Custom")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("DecimalCount")
                        .HasColumnType("int");

                    b.Property<string>("DefaultValue")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("DisplayIndex")
                        .HasColumnType("int");

                    b.Property<short?>("Dummy")
                        .HasColumnType("smallint");

                    b.Property<int?>("EntityGroupId")
                        .HasColumnType("int");

                    b.Property<int?>("FieldId")
                        .HasColumnType("int");

                    b.Property<int?>("FieldTypeId")
                        .HasColumnType("int");

                    b.Property<short?>("GeolocationEnabled")
                        .HasColumnType("smallint");

                    b.Property<short?>("GeolocationForced")
                        .HasColumnType("smallint");

                    b.Property<short?>("GeolocationHidden")
                        .HasColumnType("smallint");

                    b.Property<short?>("IsNum")
                        .HasColumnType("smallint");

                    b.Property<string>("KeyValuePairList")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Label")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<short?>("Mandatory")
                        .HasColumnType("smallint");

                    b.Property<int?>("MaxLength")
                        .HasColumnType("int");

                    b.Property<string>("MaxValue")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<string>("MinValue")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<int?>("Multi")
                        .HasColumnType("int");

                    b.Property<short?>("Optional")
                        .HasColumnType("smallint");

                    b.Property<string>("OriginalId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("ParentFieldId")
                        .HasColumnType("int");

                    b.Property<string>("QueryType")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<short?>("ReadOnly")
                        .HasColumnType("smallint");

                    b.Property<short?>("Selected")
                        .HasColumnType("smallint");

                    b.Property<short?>("Split")
                        .HasColumnType("smallint");

                    b.Property<short?>("StopOnSave")
                        .HasColumnType("smallint");

                    b.Property<string>("UnitName")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("Version")
                        .HasColumnType("int");

                    b.Property<string>("WorkflowState")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("FieldVersions");
                });

            modelBuilder.Entity("Microting.eForm.Infrastructure.Data.Entities.Folder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("MicrotingUid")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("Version")
                        .HasColumnType("int");

                    b.Property<string>("WorkflowState")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Folders");
                });

            modelBuilder.Entity("Microting.eForm.Infrastructure.Data.Entities.FolderVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("FolderId")
                        .HasColumnType("int");

                    b.Property<int?>("MicrotingUid")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("Version")
                        .HasColumnType("int");

                    b.Property<string>("WorkflowState")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("FolderVersions");
                });

            modelBuilder.Entity("Microting.eForm.Infrastructure.Data.Entities.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("Version")
                        .HasColumnType("int");

                    b.Property<string>("WorkflowState")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("Microting.eForm.Infrastructure.Data.Entities.LanguageQuestionSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<int?>("MicrotingUid")
                        .HasColumnType("int");

                    b.Property<int>("QuestionSetId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("Version")
                        .HasColumnType("int");

                    b.Property<string>("WorkflowState")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.HasIndex("QuestionSetId");

                    b.ToTable("LanguageQuestionSets");
                });

            modelBuilder.Entity("Microting.eForm.Infrastructure.Data.Entities.LanguageQuestionSetVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<int>("LanguageQuestionSetId")
                        .HasColumnType("int");

                    b.Property<int?>("MicrotingUid")
                        .HasColumnType("int");

                    b.Property<int>("QuestionSetId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("Version")
                        .HasColumnType("int");

                    b.Property<string>("WorkflowState")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("LanguageQuestionSetId");

                    b.ToTable("LanguageQuestionSetVersions");
                });

            modelBuilder.Entity("Microting.eForm.Infrastructure.Data.Entities.LanguageVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("Version")
                        .HasColumnType("int");

                    b.Property<string>("WorkflowState")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.ToTable("LanguageVersions");
                });

            modelBuilder.Entity("Microting.eForm.Infrastructure.Data.Entities.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Activity")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Exception")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("MicrotingUid")
                        .HasColumnType("int");

                    b.Property<string>("NotificationUid")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<string>("Stacktrace")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Transmission")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.Property<string>("WorkflowState")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("Microting.eForm.Infrastructure.Data.Entities.NotificationVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Activity")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Exception")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("MicrotingUid")
                        .HasColumnType("int");

                    b.Property<int>("NotificationId")
                        .HasColumnType("int");

                    b.Property<string>("NotificationUid")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<string>("Stacktrace")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Transmission")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.Property<string>("WorkflowState")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("NotificationVersions");
                });

            modelBuilder.Entity("Microting.eForm.Infrastructure.Data.Entities.Option", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ContinuousOptionId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("DisplayIndex")
                        .HasColumnType("int");

                    b.Property<int?>("MicrotingUid")
                        .HasColumnType("int");

                    b.Property<int?>("NextQuestionId")
                        .HasColumnType("int");

                    b.Property<int>("OptionIndex")
                        .HasColumnType("int");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("Version")
                        .HasColumnType("int");

                    b.Property<int>("Weight")
                        .HasColumnType("int");

                    b.Property<int>("WeightValue")
                        .HasColumnType("int");

                    b.Property<string>("WorkflowState")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("Options");
                });

            modelBuilder.Entity("Microting.eForm.Infrastructure.Data.Entities.OptionTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<int?>("MicrotingUid")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("OptionId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("Version")
                        .HasColumnType("int");

                    b.Property<string>("WorkflowState")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.HasIndex("OptionId");

                    b.ToTable("OptionTranslations");
                });

            modelBuilder.Entity("Microting.eForm.Infrastructure.Data.Entities.OptionTranslationVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<int?>("MicrotingUid")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("OptionId")
                        .HasColumnType("int");

                    b.Property<int>("OptionTranslationId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("Version")
                        .HasColumnType("int");

                    b.Property<string>("WorkflowState")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("OptionTranslationVersions");
                });

            modelBuilder.Entity("Microting.eForm.Infrastructure.Data.Entities.OptionVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ContinuousOptionId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("DisplayIndex")
                        .HasColumnType("int");

                    b.Property<int?>("MicrotingUid")
                        .HasColumnType("int");

                    b.Property<int?>("NextQuestionId")
                        .HasColumnType("int");

                    b.Property<int>("OptionId")
                        .HasColumnType("int");

                    b.Property<int>("OptionIndex")
                        .HasColumnType("int");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("Version")
                        .HasColumnType("int");

                    b.Property<int>("Weight")
                        .HasColumnType("int");

                    b.Property<int>("WeightValue")
                        .HasColumnType("int");

                    b.Property<string>("WorkflowState")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("OptionId");

                    b.ToTable("OptionVersions");
                });

            modelBuilder.Entity("Microting.eForm.Infrastructure.Data.Entities.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("BackButtonEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("ContinuousQuestionId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("FontSize")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("Image")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ImagePosition")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("MaxDuration")
                        .HasColumnType("int");

                    b.Property<int>("Maximum")
                        .HasColumnType("int");

                    b.Property<int?>("MicrotingUid")
                        .HasColumnType("int");

                    b.Property<int>("MinDuration")
                        .HasColumnType("int");

                    b.Property<int>("Minimum")
                        .HasColumnType("int");

                    b.Property<bool>("Prioritised")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("QuestionIndex")
                        .HasColumnType("int");

                    b.Property<int>("QuestionSetId")
                        .HasColumnType("int");

                    b.Property<string>("QuestionType")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("RefId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("ValidDisplay")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("Version")
                        .HasColumnType("int");

                    b.Property<string>("WorkflowState")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("QuestionSetId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("Microting.eForm.Infrastructure.Data.Entities.QuestionSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("HasChild")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("MicrotingUid")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("ParentId")
                        .HasColumnType("int");

                    b.Property<bool>("PossiblyDeployed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Share")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("Version")
                        .HasColumnType("int");

                    b.Property<string>("WorkflowState")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("QuestionSets");
                });

            modelBuilder.Entity("Microting.eForm.Infrastructure.Data.Entities.QuestionSetVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("HasChild")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("MicrotingUid")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("ParentId")
                        .HasColumnType("int");

                    b.Property<bool>("PossiblyDeployed")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("QuestionSetId")
                        .HasColumnType("int");

                    b.Property<bool>("Share")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("Version")
                        .HasColumnType("int");

                    b.Property<string>("WorkflowState")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("QuestionSetId");

                    b.ToTable("QuestionSetVersions");
                });

            modelBuilder.Entity("Microting.eForm.Infrastructure.Data.Entities.QuestionTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<int?>("MicrotingUid")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("Version")
                        .HasColumnType("int");

                    b.Property<string>("WorkflowState")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.HasIndex("QuestionId");

                    b.ToTable("QuestionTranslations");
                });

            modelBuilder.Entity("Microting.eForm.Infrastructure.Data.Entities.QuestionTranslationVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<int?>("MicrotingUid")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<int>("QuestionTranslationId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("Version")
                        .HasColumnType("int");

                    b.Property<string>("WorkflowState")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("QuestionTranslationId");

                    b.ToTable("QuestionTranslationVersions");
                });

            modelBuilder.Entity("Microting.eForm.Infrastructure.Data.Entities.QuestionVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("BackButtonEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("ContinuousQuestionId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("FontSize")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("Image")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ImagePosition")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("MaxDuration")
                        .HasColumnType("int");

                    b.Property<int>("Maximum")
                        .HasColumnType("int");

                    b.Property<int?>("MicrotingUid")
                        .HasColumnType("int");

                    b.Property<int>("MinDuration")
                        .HasColumnType("int");

                    b.Property<int>("Minimum")
                        .HasColumnType("int");

                    b.Property<bool>("Prioritised")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<int>("QuestionIndex")
                        .HasColumnType("int");

                    b.Property<int>("QuestionSetId")
                        .HasColumnType("int");

                    b.Property<string>("QuestionType")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("RefId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("ValidDisplay")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("Version")
                        .HasColumnType("int");

                    b.Property<string>("WorkflowState")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("QuestionVersions");
                });

            modelBuilder.Entity("Microting.eForm.Infrastructure.Data.Entities.Setting", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("ChangedByName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Settings");
                });

            modelBuilder.Entity("Microting.eForm.Infrastructure.Data.Entities.SettingVersion", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("ChangedByName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<int>("SettingId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("SettingVersions");
                });

            modelBuilder.Entity("Microting.eForm.Infrastructure.Data.Entities.Site", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<int?>("MicrotingUid")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("Version")
                        .HasColumnType("int");

                    b.Property<string>("WorkflowState")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("Sites");
                });

            modelBuilder.Entity("Microting.eForm.Infrastructure.Data.Entities.SiteSurveyConfiguration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("MicrotingUid")
                        .HasColumnType("int");

                    b.Property<int>("SiteId")
                        .HasColumnType("int");

                    b.Property<int>("SurveyConfigurationId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("Version")
                        .HasColumnType("int");

                    b.Property<string>("WorkflowState")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("SiteId");

                    b.HasIndex("SurveyConfigurationId");

                    b.ToTable("SiteSurveyConfigurations");
                });

            modelBuilder.Entity("Microting.eForm.Infrastructure.Data.Entities.SiteSurveyConfigurationVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("MicrotingUid")
                        .HasColumnType("int");

                    b.Property<int>("SiteId")
                        .HasColumnType("int");

                    b.Property<int>("SiteSurveyConfigurationId")
                        .HasColumnType("int");

                    b.Property<int>("SurveyConfigurationId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("Version")
                        .HasColumnType("int");

                    b.Property<string>("WorkflowState")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("SiteSurveyConfigurationId");

                    b.ToTable("SiteSurveyConfigurationVersions");
                });

            modelBuilder.Entity("Microting.eForm.Infrastructure.Data.Entities.SiteTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("SiteId")
                        .HasColumnType("int");

                    b.Property<int?>("TagId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("Version")
                        .HasColumnType("int");

                    b.Property<string>("WorkflowState")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("SiteId");

                    b.HasIndex("TagId");

                    b.ToTable("SiteTags");
                });

            modelBuilder.Entity("Microting.eForm.Infrastructure.Data.Entities.SiteTagVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("SiteId")
                        .HasColumnType("int");

                    b.Property<int>("SiteTagId")
                        .HasColumnType("int");

                    b.Property<int?>("TagId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("Version")
                        .HasColumnType("int");

                    b.Property<string>("WorkflowState")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("SiteTagVersions");
                });

            modelBuilder.Entity("Microting.eForm.Infrastructure.Data.Entities.SiteVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<int?>("MicrotingUid")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<int?>("SiteId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("Version")
                        .HasColumnType("int");

                    b.Property<string>("WorkflowState")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("SiteVersions");
                });

            modelBuilder.Entity("Microting.eForm.Infrastructure.Data.Entities.SiteWorker", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("MicrotingUid")
                        .HasColumnType("int");

                    b.Property<int?>("SiteId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("Version")
                        .HasColumnType("int");

                    b.Property<int?>("WorkerId")
                        .HasColumnType("int");

                    b.Property<string>("WorkflowState")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("SiteId");

                    b.HasIndex("WorkerId");

                    b.ToTable("SiteWorkers");
                });

            modelBuilder.Entity("Microting.eForm.Infrastructure.Data.Entities.SiteWorkerVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("MicrotingUid")
                        .HasColumnType("int");

                    b.Property<int?>("SiteId")
                        .HasColumnType("int");

                    b.Property<int?>("SiteWorkerId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("Version")
                        .HasColumnType("int");

                    b.Property<int?>("WorkerId")
                        .HasColumnType("int");

                    b.Property<string>("WorkflowState")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("SiteWorkerVersions");
                });

            modelBuilder.Entity("Microting.eForm.Infrastructure.Data.Entities.SurveyConfiguration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("MicrotingUid")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("QuestionSetId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Start")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("Stop")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("TimeOut")
                        .HasColumnType("int");

                    b.Property<int>("TimeToLive")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("Version")
                        .HasColumnType("int");

                    b.Property<string>("WorkflowState")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("QuestionSetId");

                    b.ToTable("SurveyConfigurations");
                });

            modelBuilder.Entity("Microting.eForm.Infrastructure.Data.Entities.SurveyConfigurationVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("MicrotingUid")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("QuestionSetId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Start")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("Stop")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("SurveyConfigurationId")
                        .HasColumnType("int");

                    b.Property<int>("TimeOut")
                        .HasColumnType("int");

                    b.Property<int>("TimeToLive")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("Version")
                        .HasColumnType("int");

                    b.Property<string>("WorkflowState")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("SurveyConfigurationId");

                    b.ToTable("SurveyConfigurationVersions");
                });

            modelBuilder.Entity("Microting.eForm.Infrastructure.Data.Entities.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<int?>("TaggingsCount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("Version")
                        .HasColumnType("int");

                    b.Property<string>("WorkflowState")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("Microting.eForm.Infrastructure.Data.Entities.TagVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<int?>("TagId")
                        .HasColumnType("int");

                    b.Property<int?>("TaggingsCount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("Version")
                        .HasColumnType("int");

                    b.Property<string>("WorkflowState")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("TagVersions");
                });

            modelBuilder.Entity("Microting.eForm.Infrastructure.Data.Entities.Tagging", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CheckListId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("TagId")
                        .HasColumnType("int");

                    b.Property<int?>("TaggerId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("Version")
                        .HasColumnType("int");

                    b.Property<string>("WorkflowState")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("CheckListId");

                    b.HasIndex("TagId");

                    b.ToTable("Taggings");
                });

            modelBuilder.Entity("Microting.eForm.Infrastructure.Data.Entities.TaggingVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CheckListId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("TagId")
                        .HasColumnType("int");

                    b.Property<int?>("TaggerId")
                        .HasColumnType("int");

                    b.Property<int?>("TaggingId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("Version")
                        .HasColumnType("int");

                    b.Property<string>("WorkflowState")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("TaggingVersions");
                });

            modelBuilder.Entity("Microting.eForm.Infrastructure.Data.Entities.Unit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("CustomerNo")
                        .HasColumnType("int");

                    b.Property<string>("InSightVersion")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("LastIp")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("LeftMenuEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Manufacturer")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("MicrotingUid")
                        .HasColumnType("int");

                    b.Property<string>("Model")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Note")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Os")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("OsVersion")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("OtpCode")
                        .HasColumnType("int");

                    b.Property<bool>("PushEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("SeparateFetchSend")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SerialNumber")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("SiteId")
                        .HasColumnType("int");

                    b.Property<int>("SyncDefaultDelay")
                        .HasColumnType("int");

                    b.Property<bool>("SyncDelayEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("SyncDelayPrCheckList")
                        .HasColumnType("int");

                    b.Property<bool>("SyncDialog")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("Version")
                        .HasColumnType("int");

                    b.Property<string>("WorkflowState")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<string>("eFormVersion")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("SiteId");

                    b.ToTable("Units");
                });

            modelBuilder.Entity("Microting.eForm.Infrastructure.Data.Entities.UnitVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("CustomerNo")
                        .HasColumnType("int");

                    b.Property<string>("InSightVersion")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("LastIp")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("LeftMenuEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Manufacturer")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("MicrotingUid")
                        .HasColumnType("int");

                    b.Property<string>("Model")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Note")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Os")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("OsVersion")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("OtpCode")
                        .HasColumnType("int");

                    b.Property<bool>("PushEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("SeparateFetchSend")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SerialNumber")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("SiteId")
                        .HasColumnType("int");

                    b.Property<int>("SyncDefaultDelay")
                        .HasColumnType("int");

                    b.Property<bool>("SyncDelayEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("SyncDelayPrCheckList")
                        .HasColumnType("int");

                    b.Property<bool>("SyncDialog")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("UnitId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("Version")
                        .HasColumnType("int");

                    b.Property<string>("WorkflowState")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<string>("eFormVersion")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("UnitVersions");
                });

            modelBuilder.Entity("Microting.eForm.Infrastructure.Data.Entities.UploadedData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Checksum")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CurrentFile")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Extension")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<string>("FileLocation")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<string>("FileName")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<short?>("Local")
                        .HasColumnType("smallint");

                    b.Property<int?>("TranscriptionId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("UploaderId")
                        .HasColumnType("int");

                    b.Property<string>("UploaderType")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<int?>("Version")
                        .HasColumnType("int");

                    b.Property<string>("WorkflowState")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("UploadedDatas");
                });

            modelBuilder.Entity("Microting.eForm.Infrastructure.Data.Entities.UploadedDataVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Checksum")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CurrentFile")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Extension")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<string>("FileLocation")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<string>("FileName")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<short?>("Local")
                        .HasColumnType("smallint");

                    b.Property<int?>("TranscriptionId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("UploadedDataId")
                        .HasColumnType("int");

                    b.Property<int?>("UploaderId")
                        .HasColumnType("int");

                    b.Property<string>("UploaderType")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<int?>("Version")
                        .HasColumnType("int");

                    b.Property<string>("WorkflowState")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("UploadedDataVersions");
                });

            modelBuilder.Entity("Microting.eForm.Infrastructure.Data.Entities.Worker", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<string>("FirstName")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<string>("LastName")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<int>("MicrotingUid")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("Version")
                        .HasColumnType("int");

                    b.Property<string>("WorkflowState")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("Workers");
                });

            modelBuilder.Entity("Microting.eForm.Infrastructure.Data.Entities.WorkerVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<string>("FirstName")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<string>("LastName")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<int>("MicrotingUid")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("Version")
                        .HasColumnType("int");

                    b.Property<int?>("WorkerId")
                        .HasColumnType("int");

                    b.Property<string>("WorkflowState")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("WorkerVersions");
                });

            modelBuilder.Entity("Microting.eForm.Infrastructure.Data.Entities.Answer", b =>
                {
                    b.HasOne("Microting.eForm.Infrastructure.Data.Entities.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microting.eForm.Infrastructure.Data.Entities.QuestionSet", "QuestionSet")
                        .WithMany()
                        .HasForeignKey("QuestionSetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microting.eForm.Infrastructure.Data.Entities.Site", "Site")
                        .WithMany()
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microting.eForm.Infrastructure.Data.Entities.SurveyConfiguration", "SurveyConfiguration")
                        .WithMany()
                        .HasForeignKey("SurveyConfigurationId");

                    b.HasOne("Microting.eForm.Infrastructure.Data.Entities.Unit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitId");
                });

            modelBuilder.Entity("Microting.eForm.Infrastructure.Data.Entities.AnswerValue", b =>
                {
                    b.HasOne("Microting.eForm.Infrastructure.Data.Entities.Answer", "Answer")
                        .WithMany()
                        .HasForeignKey("AnswerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microting.eForm.Infrastructure.Data.Entities.Option", "Option")
                        .WithMany()
                        .HasForeignKey("OptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microting.eForm.Infrastructure.Data.Entities.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microting.eForm.Infrastructure.Data.Entities.AnswerValueVersion", b =>
                {
                    b.HasOne("Microting.eForm.Infrastructure.Data.Entities.AnswerValue", "AnswerValue")
                        .WithMany()
                        .HasForeignKey("AnswerValueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microting.eForm.Infrastructure.Data.Entities.Case", b =>
                {
                    b.HasOne("Microting.eForm.Infrastructure.Data.Entities.CheckList", "CheckList")
                        .WithMany("Cases")
                        .HasForeignKey("CheckListId");

                    b.HasOne("Microting.eForm.Infrastructure.Data.Entities.Folder", "Folder")
                        .WithMany()
                        .HasForeignKey("FolderId");

                    b.HasOne("Microting.eForm.Infrastructure.Data.Entities.Site", "Site")
                        .WithMany("Cases")
                        .HasForeignKey("SiteId");

                    b.HasOne("Microting.eForm.Infrastructure.Data.Entities.Unit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitId");

                    b.HasOne("Microting.eForm.Infrastructure.Data.Entities.Worker", "Worker")
                        .WithMany()
                        .HasForeignKey("WorkerId");
                });

            modelBuilder.Entity("Microting.eForm.Infrastructure.Data.Entities.CheckList", b =>
                {
                    b.HasOne("Microting.eForm.Infrastructure.Data.Entities.CheckList", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");
                });

            modelBuilder.Entity("Microting.eForm.Infrastructure.Data.Entities.CheckListSite", b =>
                {
                    b.HasOne("Microting.eForm.Infrastructure.Data.Entities.CheckList", "CheckList")
                        .WithMany("CheckListSites")
                        .HasForeignKey("CheckListId");

                    b.HasOne("Microting.eForm.Infrastructure.Data.Entities.Folder", "Folder")
                        .WithMany()
                        .HasForeignKey("FolderId");

                    b.HasOne("Microting.eForm.Infrastructure.Data.Entities.Site", "Site")
                        .WithMany("CheckListSites")
                        .HasForeignKey("SiteId");
                });

            modelBuilder.Entity("Microting.eForm.Infrastructure.Data.Entities.CheckListTranslation", b =>
                {
                    b.HasOne("Microting.eForm.Infrastructure.Data.Entities.CheckList", "CheckList")
                        .WithMany("Translations")
                        .HasForeignKey("CheckListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microting.eForm.Infrastructure.Data.Entities.Field", b =>
                {
                    b.HasOne("Microting.eForm.Infrastructure.Data.Entities.CheckList", "CheckList")
                        .WithMany("Fields")
                        .HasForeignKey("CheckListId");

                    b.HasOne("Microting.eForm.Infrastructure.Data.Entities.FieldType", "FieldType")
                        .WithMany()
                        .HasForeignKey("FieldTypeId");

                    b.HasOne("Microting.eForm.Infrastructure.Data.Entities.Field", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentFieldId");
                });

            modelBuilder.Entity("Microting.eForm.Infrastructure.Data.Entities.FieldOption", b =>
                {
                    b.HasOne("Microting.eForm.Infrastructure.Data.Entities.Field", "Field")
                        .WithMany("FieldOptions")
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microting.eForm.Infrastructure.Data.Entities.FieldOptionTranslation", b =>
                {
                    b.HasOne("Microting.eForm.Infrastructure.Data.Entities.FieldOption", "FieldOption")
                        .WithMany("FieldOptionTranslations")
                        .HasForeignKey("FieldOptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microting.eForm.Infrastructure.Data.Entities.FieldTranslation", b =>
                {
                    b.HasOne("Microting.eForm.Infrastructure.Data.Entities.Field", "Field")
                        .WithMany("Translations")
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microting.eForm.Infrastructure.Data.Entities.FieldValue", b =>
                {
                    b.HasOne("Microting.eForm.Infrastructure.Data.Entities.CheckList", "CheckList")
                        .WithMany()
                        .HasForeignKey("CheckListId");

                    b.HasOne("Microting.eForm.Infrastructure.Data.Entities.Field", "Field")
                        .WithMany("FieldValues")
                        .HasForeignKey("FieldId");

                    b.HasOne("Microting.eForm.Infrastructure.Data.Entities.UploadedData", "UploadedData")
                        .WithMany()
                        .HasForeignKey("UploadedDataId");

                    b.HasOne("Microting.eForm.Infrastructure.Data.Entities.Worker", "Worker")
                        .WithMany()
                        .HasForeignKey("WorkerId");
                });

            modelBuilder.Entity("Microting.eForm.Infrastructure.Data.Entities.Folder", b =>
                {
                    b.HasOne("Microting.eForm.Infrastructure.Data.Entities.Folder", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");
                });

            modelBuilder.Entity("Microting.eForm.Infrastructure.Data.Entities.LanguageQuestionSet", b =>
                {
                    b.HasOne("Microting.eForm.Infrastructure.Data.Entities.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microting.eForm.Infrastructure.Data.Entities.QuestionSet", "QuestionSet")
                        .WithMany("LanguageQuestionSetses")
                        .HasForeignKey("QuestionSetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microting.eForm.Infrastructure.Data.Entities.LanguageQuestionSetVersion", b =>
                {
                    b.HasOne("Microting.eForm.Infrastructure.Data.Entities.LanguageQuestionSet", "LanguageQuestionSet")
                        .WithMany()
                        .HasForeignKey("LanguageQuestionSetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microting.eForm.Infrastructure.Data.Entities.LanguageVersion", b =>
                {
                    b.HasOne("Microting.eForm.Infrastructure.Data.Entities.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microting.eForm.Infrastructure.Data.Entities.Option", b =>
                {
                    b.HasOne("Microting.eForm.Infrastructure.Data.Entities.Question", "Question")
                        .WithMany("Options")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microting.eForm.Infrastructure.Data.Entities.OptionTranslation", b =>
                {
                    b.HasOne("Microting.eForm.Infrastructure.Data.Entities.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microting.eForm.Infrastructure.Data.Entities.Option", "Option")
                        .WithMany("OptionTranslationses")
                        .HasForeignKey("OptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microting.eForm.Infrastructure.Data.Entities.OptionVersion", b =>
                {
                    b.HasOne("Microting.eForm.Infrastructure.Data.Entities.Option", "Option")
                        .WithMany()
                        .HasForeignKey("OptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microting.eForm.Infrastructure.Data.Entities.Question", b =>
                {
                    b.HasOne("Microting.eForm.Infrastructure.Data.Entities.QuestionSet", "QuestionSet")
                        .WithMany("Questions")
                        .HasForeignKey("QuestionSetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microting.eForm.Infrastructure.Data.Entities.QuestionSetVersion", b =>
                {
                    b.HasOne("Microting.eForm.Infrastructure.Data.Entities.QuestionSet", "QuestionSet")
                        .WithMany()
                        .HasForeignKey("QuestionSetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microting.eForm.Infrastructure.Data.Entities.QuestionTranslation", b =>
                {
                    b.HasOne("Microting.eForm.Infrastructure.Data.Entities.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microting.eForm.Infrastructure.Data.Entities.Question", "Question")
                        .WithMany("QuestionTranslationses")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microting.eForm.Infrastructure.Data.Entities.QuestionTranslationVersion", b =>
                {
                    b.HasOne("Microting.eForm.Infrastructure.Data.Entities.QuestionTranslation", "QuestionTranslation")
                        .WithMany()
                        .HasForeignKey("QuestionTranslationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microting.eForm.Infrastructure.Data.Entities.QuestionVersion", b =>
                {
                    b.HasOne("Microting.eForm.Infrastructure.Data.Entities.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microting.eForm.Infrastructure.Data.Entities.SiteSurveyConfiguration", b =>
                {
                    b.HasOne("Microting.eForm.Infrastructure.Data.Entities.Site", "Site")
                        .WithMany()
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microting.eForm.Infrastructure.Data.Entities.SurveyConfiguration", "SurveyConfiguration")
                        .WithMany("SiteSurveyConfigurations")
                        .HasForeignKey("SurveyConfigurationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microting.eForm.Infrastructure.Data.Entities.SiteSurveyConfigurationVersion", b =>
                {
                    b.HasOne("Microting.eForm.Infrastructure.Data.Entities.SiteSurveyConfiguration", "SiteSurveyConfiguration")
                        .WithMany()
                        .HasForeignKey("SiteSurveyConfigurationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microting.eForm.Infrastructure.Data.Entities.SiteTag", b =>
                {
                    b.HasOne("Microting.eForm.Infrastructure.Data.Entities.Site", "Site")
                        .WithMany("SiteTags")
                        .HasForeignKey("SiteId");

                    b.HasOne("Microting.eForm.Infrastructure.Data.Entities.Tag", "Tag")
                        .WithMany()
                        .HasForeignKey("TagId");
                });

            modelBuilder.Entity("Microting.eForm.Infrastructure.Data.Entities.SiteWorker", b =>
                {
                    b.HasOne("Microting.eForm.Infrastructure.Data.Entities.Site", "Site")
                        .WithMany("SiteWorkers")
                        .HasForeignKey("SiteId");

                    b.HasOne("Microting.eForm.Infrastructure.Data.Entities.Worker", "Worker")
                        .WithMany("SiteWorkers")
                        .HasForeignKey("WorkerId");
                });

            modelBuilder.Entity("Microting.eForm.Infrastructure.Data.Entities.SurveyConfiguration", b =>
                {
                    b.HasOne("Microting.eForm.Infrastructure.Data.Entities.QuestionSet", "QuestionSet")
                        .WithMany()
                        .HasForeignKey("QuestionSetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microting.eForm.Infrastructure.Data.Entities.SurveyConfigurationVersion", b =>
                {
                    b.HasOne("Microting.eForm.Infrastructure.Data.Entities.SurveyConfiguration", "SurveyConfiguration")
                        .WithMany()
                        .HasForeignKey("SurveyConfigurationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microting.eForm.Infrastructure.Data.Entities.Tagging", b =>
                {
                    b.HasOne("Microting.eForm.Infrastructure.Data.Entities.CheckList", "CheckList")
                        .WithMany("Taggings")
                        .HasForeignKey("CheckListId");

                    b.HasOne("Microting.eForm.Infrastructure.Data.Entities.Tag", "Tag")
                        .WithMany("Taggings")
                        .HasForeignKey("TagId");
                });

            modelBuilder.Entity("Microting.eForm.Infrastructure.Data.Entities.Unit", b =>
                {
                    b.HasOne("Microting.eForm.Infrastructure.Data.Entities.Site", "Site")
                        .WithMany("Units")
                        .HasForeignKey("SiteId");
                });
#pragma warning restore 612, 618
        }
    }
}
